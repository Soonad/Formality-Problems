// :::::::::::::::
// :: Datatypes ::
// :::::::::::::::

// The Empty type, with no constructors
T Empty

// The Unit type, with one constructor
T Unit
| unit

// The Bool type, with two constructors
T Bool
| true
| false

// The Or(A, B) type can have either A or B
T Or {A : Type, B : Type}
| left  {val : A}
| right {val : B}

// The And(A, B) type must have both A and B
T And {A : Type, B : Type}
| both {a : A, b : B}

// The Maybe(A) type may have A
T Maybe {A : Type}
| just {val : A}
| none

// The Nat type can be zero or a the sucessor of another Nat
T Nat
| succ {pred : Nat}
| zero

// The List(A) type can be empty, or an A appended to a List(A)
T List {A : Type}
| cons {head : A, tail : List(A)}
| nil

// :::::::::::::::
// :::::::::::::::

// The Bool `b` is false
T IsTrue (b : Bool)
| it_is  (true)

// The Bool `b` is true
T IsTrue (b : Bool)
| it_is  (true)

// The Nat `a` is larger than 0
T Positive (a : Nat)
| positive {a : Nat} (succ(a))

// The Nat `a` is the predecessor of the Nat `b`
T IsPred (a : Nat, b : Nat)
| is_pred {pred : Nat} (pred, succ(pred))

// The List(A) `xs` is not empty
T NonEmpty {A : Type} (xs : List(A))
| non_empty {x : A, xs : List(A)} (cons(~A, x, xs))

// A Fin is a Nat with a known max. value
T Fin (len : Ind)
| fsucc {~i : Ind, pred : Fin(i)} (step(i))
| fzero {~i : Ind} (step(i))

// A Vec is a list with a known length
T Vec {A : Type} (len : Ind)
| vcons {~len : Ind, x : A, xs : Vec(A, len)} (step(len))
| vnil (base)

// Element `elem` is at index `n` of vector `xs`
T At {A : Type, elem : A} (len : Ind, idx : Fin(len), xs : Vec(A, len))
| here
  { len : Ind
  , vec : Vec(A, len)
  } (step(len), fzero(~len), vcons(~A, ~len, elem, vec))
| there
  { skip : A
  , len  : Ind
  , idx  : Fin(len)
  , vec  : Vec(A, len)
  , at   : At(A, elem, len, idx, vec)
  } (step(len), fsucc(~len, idx), vcons(~A, ~len, skip, vec))

// :::::::::::::::
// :: Functions ::
// :::::::::::::::

// A type that can't be constructed is the same as a false theorem
Not : {A : Type} -> Type
  A -> Empty

// A boolean negation function
not : {x : Bool} -> Bool
  case/Bool x
  | true  => false
  | false => true
  : Bool

// If-then-else with Bool
iff : {x : Bool, ~A : Type, case_true : A, case_false : A} -> A
  case/Bool x
  | true  => case_true
  | false => case_false
  : A

// From falsehood, everything follows
absurd : {e : Empty, ~P : Type} -> P
  case/Empty e
  : P

// :::::::::::::::
// :: Induction ::
// :::::::::::::::

// The inductive hypothesis on nats. Erases to Church.
Ind : Type
  $ self
  {~P     : {r : Ind} -> Type} ->
  {step   : ! {~r : Ind, i : P(r)} -> P(step(r))} ->
  ! {base : P(base)} ->
    P(self)

step : {r : Ind} -> Ind
  new(~Ind){~P, step}
  dup step = step
  dup func = (%r)(~P, #step)
  # {base}
    step(~r, func(base))

base : Ind
  new(~Ind){~P, step}
  dup step = step
  # {base}
    base

// Doubles the number of steps of an `ind`.
twice : {n : Ind} -> Ind
  new(~Ind) {~P, STEP}
  dup STEP = STEP
  let moti = {n} P(twice(n))
  let STEP = {~n, i} => STEP(~step(twice(n)), STEP(~twice(n), i))
  dup loop = (%n)(~moti, #STEP)
  # {base} loop(base)

// Since `Ind` is just the type of the inductive hypothesis wrapped on self,
// then induction on `Ind` is just identity.
ind :
  {n     : Ind
  , ~P   : {n : Ind} -> Type
  , step : ! {~n : Ind, i : P(n)} -> P(step(n))
  , stop : ! P(base)
  } -> ! P(n)
  dup step = step
  dup stop = stop
  dup loop = (%n)(~P, #step)
  # loop(stop)
