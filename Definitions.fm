// The Empty type can't be constructed
T Empty

// The Unit type can be constructed with `unit`
T Unit
| unit

// The Bool type can be constructed with `true` or `false`
T Bool
| true
| false

// The Or(A, B) type can be constructed with `left` or `right`
// - left  : stores a value of type A
// - right : stores a value of type B
T Or {A : Type, B : Type}
| left  {val : A}
| right {val : B}

// The And(A, B) type has one constructor
// - both : stores a value of type A and a value of type B
T And {A : Type, B : Type}
| both {a : A, b : B}

// The Maybe(A) type can be constructed with `some` or `none`
// - just : stores a value of type A
// - none : stores nothing
T Maybe {A : Type}
| just {val : A}
| none

// A boolean negation function
not : {x : Bool} -> Bool
  case/Bool x
  | true  => false
  | false => true
  : Bool

// If-then-else with Bool
iff : {x : Bool, ~A : Type, case_true : A, case_false : A} -> A
  case/Bool x
  | true  => case_true
  | false => case_false
  : A

// A type that can't be constructed is the same as a false theorem
Not : {A : Type} -> Type
  A -> Empty

