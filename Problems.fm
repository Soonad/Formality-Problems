import Definitions

P0  {~A : Type, ~B : Type, f : A -> B, x : A} -> B
P1  {~A : Type, ~B : Type, x : And(A, B)} -> [:A, B]
P2  {x : Bool} -> iff(x, ~Type, Unit, Word)
P3  true == true
P4  {e : true == false} -> false == true
P5  {a : Bool, b : Bool, b_is_a : b == a, a_is_true : a == true} -> b == true
P6  {e : Empty, ~P : Type} -> P
P7  {~A : Type, ~B : Type, vals : And(A, B)} -> And(B, A)
P8  {~A : Type, ~B : Type, x : Maybe(A), f : A -> B} -> Maybe(B)
P9  {a : Bool} -> [b : Bool, ~(a == b)]
P10 Not(true == false)
P11 {a : Bool} -> [b : Bool, ~Not(a == b)]
P12 {~A : Type, x : Maybe(A), not_none : Not(x == none(~A))} -> A
